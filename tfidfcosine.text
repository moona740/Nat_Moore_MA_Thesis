# -*- coding: utf-8 -*-
"""
Created on Sat Feb 22 10:53:05 2020

@author: Nat Moore
"""

from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import TfidfTransformer
from sklearn.metrics.pairwise import cosine_similarity
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer

doc_1 = "The star, roughly the same size as our sun, was eventually sucked into oblivion"
doc_2 = "The star was eventually sucked into oblivion"
doc_3 = "Earth is the only planet known to have life on it."
documents = [doc_1, doc_2, doc_3]

count_vectorizer = CountVectorizer(stop_words='english')
word_count_vector = count_vectorizer.fit_transform(documents)
print(word_count_vector.shape)

tfidf_transformer = TfidfTransformer(smooth_idf=True,use_idf=True)
tfidf_transformer.fit(word_count_vector)

# print idf values
df_idf = pd.DataFrame(tfidf_transformer.idf_, index=count_vectorizer.get_feature_names(),columns=["idf_weights"])

# sort ascending
print(df_idf.sort_values(by=['idf_weights']))
# the lower the idf value the less unique it is in relation to the set of documents



# tf-idf scores
tf_idf_vector=tfidf_transformer.transform(word_count_vector)


#tf_idf_vector = tfidf_transformer.transform(word_count_vector)

feature_names = count_vectorizer.get_feature_names()

#get tfidf vector for first document
first_document_vector=tf_idf_vector[0]

#print the scores
df = pd.DataFrame(first_document_vector.T.todense(), index=feature_names, columns=["tfidf"])
print(df.sort_values(by=["tfidf"],ascending=False))
